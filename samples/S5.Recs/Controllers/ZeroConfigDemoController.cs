using Microsoft.AspNetCore.Mvc;
using Koan.Web.Auth.Services.Attributes;
using Koan.Web.Auth.Services.Http;

namespace S5.Recs.Controllers;

/// <summary>
/// Demonstrates ZERO-CONFIGURATION service authentication.
/// No appsettings.json configuration required - everything is auto-generated!
/// </summary>
[ApiController]
[KoanService("zero-config-demo", ProvidedScopes = new[] { "demo:read", "demo:write" })]
[Route("api/[controller]")]
public class ZeroConfigDemoController : ControllerBase
{
    private readonly IKoanServiceClient _serviceClient;
    private readonly ILogger<ZeroConfigDemoController> _logger;

    public ZeroConfigDemoController(IKoanServiceClient serviceClient, ILogger<ZeroConfigDemoController> logger)
    {
        _serviceClient = serviceClient;
        _logger = logger;
    }

    /// <summary>
    /// Demonstrates automatic service authentication with zero manual configuration.
    /// The framework auto-generates:
    /// - ClientId: "zero-config-demo" (from KoanService attribute)
    /// - ClientSecret: SHA256 hash of "koan-dev-secret-zero-config-demo-S5.Recs"
    /// - JWT Issuer: "koan-s5-recs-dev" (from environment.ApplicationName)
    /// - JWT Audience: "s5-recs-services"
    /// - Allowed Scopes: ["demo:read", "demo:write", "ai:inference"] (from all discovered services)
    /// - Service Endpoints: Auto-discovery via container names, host bridge, localhost
    /// </summary>
    [HttpGet("test-zero-config")]
    [CallsService("ai-service", RequiredScopes = new[] { "ai:inference" })]
    public IActionResult TestZeroConfiguration()
    {
        _logger.LogInformation("Testing zero-configuration service authentication...");

        try
        {
            // This call will:
            // 1. Auto-discover "ai-service" endpoint (http://ai-service:8080, http://localhost:8001, etc.)
            // 2. Auto-acquire JWT token with "ai:inference" scope using generated client credentials
            // 3. Add Authorization: Bearer <token> header automatically
            // 4. Make HTTP call with full authentication

            _logger.LogInformation("Making authenticated call to ai-service...");

            // For demo purposes, we'll simulate what would normally be a real AI service call
            var mockRequest = new
            {
                prompt = "Test zero-config authentication",
                model = "test-model",
                timestamp = DateTimeOffset.UtcNow
            };

            // This would normally call: await _serviceClient.PostAsync<AiResponse>("ai-service", "/api/inference", mockRequest);
            // But since we don't have a real AI service running, we'll return demo data

            return Ok(new
            {
                message = "Zero-configuration authentication successful!",
                autoGeneratedConfig = new
                {
                    clientId = "zero-config-demo", // From [KoanService] attribute
                    clientSecret = "[SHA256 hash auto-generated]", // Deterministic in development
                    jwtIssuer = "koan-s5-recs-dev", // From ApplicationName + environment
                    jwtAudience = "s5-recs-services",
                    discoveredScopes = new[] { "demo:read", "demo:write", "ai:inference" },
                    serviceDiscovery = "Container-aware auto-discovery enabled"
                },
                simulatedServiceCall = new
                {
                    targetService = "ai-service",
                    endpoint = "/api/inference",
                    requiredScopes = new[] { "ai:inference" },
                    request = mockRequest,
                    authenticationMethod = "JWT Bearer Token (auto-acquired)"
                },
                configurationRequired = "ZERO lines of JSON configuration!",
                note = "In a real scenario, this would call the AI service with automatic JWT authentication"
            });
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Zero-config authentication test failed");
            return StatusCode(500, new
            {
                error = ex.Message,
                note = "This is expected in demo mode without real services running",
                zeroConfigStillWorks = true
            });
        }
    }

    /// <summary>
    /// Demonstrates multiple service calls with different scopes, all auto-configured.
    /// </summary>
    [HttpPost("multi-service-zero-config")]
    [CallsService("analytics-service", RequiredScopes = new[] { "analytics:write" })]
    [CallsService("user-service", RequiredScopes = new[] { "users:read" })]
    [CallsService("notification-service", RequiredScopes = new[] { "notifications:send" }, Optional = true)]
    public IActionResult MultiServiceZeroConfig([FromBody] DemoRequest request)
    {
        _logger.LogInformation("Testing multi-service zero-configuration...");

        var results = new List<object>();

        // Each service call uses different auto-generated tokens with appropriate scopes
        try
        {
            _logger.LogInformation("Calling analytics-service with auto-generated 'analytics:write' scope...");
            results.Add(new
            {
                service = "analytics-service",
                scope = "analytics:write",
                status = "would-succeed",
                authToken = "[Auto-generated JWT with analytics:write scope]"
            });

            _logger.LogInformation("Calling user-service with auto-generated 'users:read' scope...");
            results.Add(new
            {
                service = "user-service",
                scope = "users:read",
                status = "would-succeed",
                authToken = "[Auto-generated JWT with users:read scope]"
            });

            _logger.LogInformation("Calling optional notification-service...");
            results.Add(new
            {
                service = "notification-service",
                scope = "notifications:send",
                optional = true,
                status = "would-succeed-or-gracefully-fail",
                authToken = "[Auto-generated JWT with notifications:send scope]"
            });

            return Ok(new
            {
                message = "Multi-service zero-configuration test completed",
                servicesCallsSimulated = results.Count,
                results = results,
                autoConfiguration = new
                {
                    clientCredentialsGenerated = results.Count,
                    scopesAutoMatched = true,
                    endpointsAutoDiscovered = true,
                    secretsAutoGenerated = true,
                    jwtTokensAutoAcquired = true
                },
                configurationLinesRequired = 0
            });
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Multi-service zero-config test failed");
            return StatusCode(500, new { error = ex.Message, results = results });
        }
    }

    /// <summary>
    /// Shows what the auto-generated configuration looks like under the hood.
    /// </summary>
    [HttpGet("show-auto-config")]
    public IActionResult ShowAutoGeneratedConfig()
    {
        return Ok(new
        {
            title = "Auto-Generated Configuration (Zero Manual Setup Required)",
            testProviderConfig = new
            {
                useJwtTokens = true, // Auto-enabled
                enableClientCredentials = true, // Auto-enabled
                jwtIssuer = "koan-s5-recs-dev", // From ApplicationName + Environment
                jwtAudience = "s5-recs-services", // From ApplicationName
                allowedScopes = new[] { "demo:read", "demo:write", "ai:inference", "analytics:write", "users:read", "notifications:send" }, // From discovered services
                registeredClients = new
                {
                    zeroConfigDemo = new
                    {
                        clientId = "zero-config-demo",
                        clientSecret = "[Deterministic SHA256 hash in dev, env var in prod]",
                        allowedScopes = new[] { "demo:read", "demo:write", "ai:inference" },
                        description = "Auto-registered service: zero-config-demo"
                    },
                    aiService = new
                    {
                        clientId = "ai-service",
                        clientSecret = "[Auto-generated for dependency]",
                        allowedScopes = new[] { "ai:inference", "koan:service" },
                        description = "Auto-registered dependency: ai-service"
                    }
                }
            },
            serviceAuthConfig = new
            {
                clientId = "zero-config-demo", // From [KoanService] attribute
                clientSecret = "[Auto-generated deterministic secret]",
                defaultScopes = new[] { "demo:read", "demo:write" }, // From ProvidedScopes
                tokenEndpoint = "/.testoauth/token", // Default
                validateServerCertificate = false, // Development default
                enableAutoDiscovery = true // Development default
            },
            developmentSecrets = new
            {
                note = "Secrets are deterministically generated in development for reproducibility",
                algorithm = "SHA256 hash of 'koan-dev-secret-{serviceId}-{applicationName}'",
                example = "SHA256('koan-dev-secret-zero-config-demo-S5.Recs').ToBase64String().Substring(0, 32)"
            },
            productionSecrets = new
            {
                note = "Production requires environment variables for security",
                requiredEnvVars = new[]
                {
                    "KOAN_SERVICE_SECRET_ZERO_CONFIG_DEMO=production-secret-here"
                }
            },
            serviceDiscovery = new
            {
                autoDiscoveryEnabled = true,
                resolutionOrder = new[]
                {
                    "1. Manual configuration override",
                    "2. Environment variable (KOAN_SERVICE_{SERVICEID}_URL)",
                    "3. Container service name (http://ai-service:8080)",
                    "4. Host bridge (http://host.docker.internal:8001)",
                    "5. Localhost port (http://localhost:8001)"
                }
            },
            zeroConfigurationBenefits = new
            {
                configLinesRequired = 0,
                manualSetupTime = "Zero minutes",
                secretManagement = "Automatic in dev, env vars in prod",
                serviceDiscovery = "Fully automatic",
                jwtTokens = "Auto-acquired and cached",
                scopeValidation = "Automatic based on attributes",
                errorHandling = "Graceful degradation built-in"
            }
        });
    }

    public record DemoRequest(string Action, Dictionary<string, object> Parameters);
}